// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

using System;
using Microsoft.CodeAnalysis;

namespace Roslynator.Formatting.CSharp
{
    public static partial class DiagnosticDescriptors
    {
        /// <summary>RCS0001</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineAfterEmbeddedStatement = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineAfterEmbeddedStatement, 
            title:              "Add empty line after embedded statement.", 
            messageFormat:      "Add empty line after embedded statement.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineAfterEmbeddedStatement, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0002</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineAfterRegionDirective = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineAfterRegionDirective, 
            title:              "Add empty line after #region.", 
            messageFormat:      "Add empty after #region.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineAfterRegionDirective, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0003</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineAfterUsingDirectiveList = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineAfterUsingDirectiveList, 
            title:              "Add empty line after using directive list.", 
            messageFormat:      "Add empty line after using directive list.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineAfterUsingDirectiveList, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0004</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBeforeClosingBraceOfDoStatement = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineBeforeClosingBraceOfDoStatement, 
            title:              "Add empty line before closing brace of 'do' statement.", 
            messageFormat:      "Add empty line before closing brace of 'do' statement.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineBeforeClosingBraceOfDoStatement, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0005</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBeforeEndRegionDirective = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineBeforeEndRegionDirective, 
            title:              "Add empty line before #endregion.", 
            messageFormat:      "Add empty line before #endregion.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineBeforeEndRegionDirective, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0006</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBeforeUsingDirectiveList = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineBeforeUsingDirectiveList, 
            title:              "Add empty line before using directive list.", 
            messageFormat:      "Add empty line before using directive list.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineBeforeUsingDirectiveList, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0007</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenAccessors = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenAccessors, 
            title:              "Add empty line between accessors.", 
            messageFormat:      "Add empty line between accessors.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineBetweenAccessors, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0008</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenBlockAndStatement = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenBlockAndStatement, 
            title:              "Add empty line between block and statement.", 
            messageFormat:      "Add empty line between block and statement.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineBetweenBlockAndStatement, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0009</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenDeclarationAndDocumentationComment = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenDeclarationAndDocumentationComment, 
            title:              "Add empty line between declaration and documentation comment.", 
            messageFormat:      "Add empty line between declaration and documentation comment.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineBetweenDeclarationAndDocumentationComment, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0010</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenDeclarations = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenDeclarations, 
            title:              "Add empty line between declarations.", 
            messageFormat:      "Add empty line between declarations.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineBetweenDeclarations, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0011</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenSingleLineAccessorsOrViceVersa = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenSingleLineAccessorsOrViceVersa, 
            title:              "Add empty line between single-line accessors (or vice versa).", 
            messageFormat:      "Add empty line between single-line accessors.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineBetweenSingleLineAccessorsOrViceVersa, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0012</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenSingleLineDeclarations = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenSingleLineDeclarations, 
            title:              "Add empty line between single-line declarations.", 
            messageFormat:      "Add empty line between single-line declarations.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineBetweenSingleLineDeclarations, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0013</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenSingleLineDeclarationsOfDifferentKind = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenSingleLineDeclarationsOfDifferentKind, 
            title:              "Add empty line between single-line declarations of different kind.", 
            messageFormat:      "Add empty line between single-line declarations of different kind.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineBetweenSingleLineDeclarationsOfDifferentKind, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0014</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenSwitchSections = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenSwitchSections, 
            title:              "Add empty line between switch sections.", 
            messageFormat:      "Add empty line between switch sections.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineBetweenSwitchSections, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0015</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenUsingDirectivesWithDifferentRootNamespaceOrViceVersa = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenUsingDirectivesWithDifferentRootNamespaceOrViceVersa, 
            title:              "Add empty line between using directives with different root namespace (or vice versa).", 
            messageFormat:      "Add empty line between using directives.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineBetweenUsingDirectivesWithDifferentRootNamespaceOrViceVersa, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0016</summary>
        public static readonly DiagnosticDescriptor AddNewLineAfterAttributeList = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineAfterAttributeList, 
            title:              "Add newline after attribute list.", 
            messageFormat:      "Add newline after attribute list.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineAfterAttributeList, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0020</summary>
        public static readonly DiagnosticDescriptor AddNewLineAfterOpeningBraceOfAccessor = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineAfterOpeningBraceOfAccessor, 
            title:              "Add newline after opening brace of accessor.", 
            messageFormat:      "Add newline after opening brace of accessor.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineAfterOpeningBraceOfAccessor, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0021</summary>
        public static readonly DiagnosticDescriptor AddNewLineAfterOpeningBraceOfBlock = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineAfterOpeningBraceOfBlock, 
            title:              "Add newline after opening brace of block.", 
            messageFormat:      "Add newline after opening brace of block.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineAfterOpeningBraceOfBlock, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0022</summary>
        public static readonly DiagnosticDescriptor AddNewLineAfterOpeningBraceOfEmptyBlock = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineAfterOpeningBraceOfEmptyBlock, 
            title:              "Add newline after opening brace of empty block.", 
            messageFormat:      "Add newline after opening brace of empty block.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineAfterOpeningBraceOfEmptyBlock, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0023</summary>
        public static readonly DiagnosticDescriptor AddNewLineAfterOpeningBraceOfTypeDeclaration = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineAfterOpeningBraceOfTypeDeclaration, 
            title:              "Add newline after opening brace of type declaration.", 
            messageFormat:      "Add newline after opening brace of type declaration.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineAfterOpeningBraceOfTypeDeclaration, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0024</summary>
        public static readonly DiagnosticDescriptor AddNewLineAfterSwitchLabel = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineAfterSwitchLabel, 
            title:              "Add newline after switch label.", 
            messageFormat:      "Add newline after switch label.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineAfterSwitchLabel, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0025</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeAccessorOfFullProperty = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeAccessorOfFullProperty, 
            title:              "Add newline before accessor of full property.", 
            messageFormat:      "Add newline before accessor of full property.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineBeforeAccessorOfFullProperty, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0027</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeBinaryOperatorInsteadOfAfterItOrViceVersa = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeBinaryOperatorInsteadOfAfterItOrViceVersa, 
            title:              "Add newline before binary operator instead of after it (or vice versa).", 
            messageFormat:      "Add newline before binary operator instead of after it.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineBeforeBinaryOperatorInsteadOfAfterItOrViceVersa, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0028</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeConditionalOperatorInsteadOfAfterItOrViceVersa = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeConditionalOperatorInsteadOfAfterItOrViceVersa, 
            title:              "Add newline before conditional operator instead of after it (or vice versa).", 
            messageFormat:      "Add newline before conditional operator instead of after it.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineBeforeConditionalOperatorInsteadOfAfterItOrViceVersa, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0029</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeConstructorInitializer = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeConstructorInitializer, 
            title:              "Add newline before constructor initializer.", 
            messageFormat:      "Add newline before constructor initializer.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineBeforeConstructorInitializer, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0030</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeEmbeddedStatement = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeEmbeddedStatement, 
            title:              "Add newline before embedded statement.", 
            messageFormat:      "Add newline before embedded statement.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineBeforeEmbeddedStatement, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0031</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeEnumMember = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeEnumMember, 
            title:              "Add newline before enum member.", 
            messageFormat:      "Add newline before enum member.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineBeforeEnumMember, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0032</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeExpressionBodyArrowInsteadOfAfterItOrViceVersa = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeExpressionBodyArrowInsteadOfAfterItOrViceVersa, 
            title:              "Add newline before expression-body arrow instead of after it (or vice versa).", 
            messageFormat:      "Add newline before expression-body arrow instead of after it.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineBeforeExpressionBodyArrowInsteadOfAfterItOrViceVersa, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0033</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeStatement = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeStatement, 
            title:              "Add newline before statement.", 
            messageFormat:      "Add newline before statement.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineBeforeStatement, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0034</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeTypeParameterConstraint = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeTypeParameterConstraint, 
            title:              "Add newline before type parameter constraint.", 
            messageFormat:      "Add newline before type parameter constraint.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineBeforeTypeParameterConstraint, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0036</summary>
        public static readonly DiagnosticDescriptor RemoveEmptyLineBetweenSingleLineDeclarationsOfSameKind = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.RemoveEmptyLineBetweenSingleLineDeclarationsOfSameKind, 
            title:              "Remove empty line between single-line declarations of same kind.", 
            messageFormat:      "Remove empty line between single-line declarations of same kind.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveEmptyLineBetweenSingleLineDeclarationsOfSameKind, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0038</summary>
        public static readonly DiagnosticDescriptor RemoveEmptyLineBetweenUsingDirectivesWithSameRootNamespace = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.RemoveEmptyLineBetweenUsingDirectivesWithSameRootNamespace, 
            title:              "Remove empty line between using directives with same root namespace.", 
            messageFormat:      "Remove empty line between using directives.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveEmptyLineBetweenUsingDirectivesWithSameRootNamespace, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0039</summary>
        public static readonly DiagnosticDescriptor RemoveNewLineBeforeBaseList = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.RemoveNewLineBeforeBaseList, 
            title:              "Remove newline before base list.", 
            messageFormat:      "Remove newline before base list.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveNewLineBeforeBaseList, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0041</summary>
        public static readonly DiagnosticDescriptor RemoveNewLineBetweenIfKeywordAndElseKeyword = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.RemoveNewLineBetweenIfKeywordAndElseKeyword, 
            title:              "Remove newline between 'if' keyword and 'else' keyword.", 
            messageFormat:      "Remove newline between 'if' keyword and 'else' keyword.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveNewLineBetweenIfKeywordAndElseKeyword, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0042</summary>
        public static readonly DiagnosticDescriptor RemoveNewLinesFromAccessorListOfAutoProperty = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.RemoveNewLinesFromAccessorListOfAutoProperty, 
            title:              "Remove newlines from accessor list of auto-property.", 
            messageFormat:      "Remove newlines from accessor list of auto-property.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveNewLinesFromAccessorListOfAutoProperty, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0043</summary>
        public static readonly DiagnosticDescriptor RemoveNewLinesFromAccessorWithSingleLineExpression = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.RemoveNewLinesFromAccessorWithSingleLineExpression, 
            title:              "Remove newlines from accessor with single-line expression.", 
            messageFormat:      "Remove newlines from accessor with single-line expression.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveNewLinesFromAccessorWithSingleLineExpression, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0044</summary>
        public static readonly DiagnosticDescriptor UseCarriageReturnAndLinefeedAsNewLine = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.UseCarriageReturnAndLinefeedAsNewLine, 
            title:              "Use carriage return + linefeed as newline.", 
            messageFormat:      "Use carriage return + linefeed as newline.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseCarriageReturnAndLinefeedAsNewLine, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0045</summary>
        public static readonly DiagnosticDescriptor UseLinefeedAsNewLine = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.UseLinefeedAsNewLine, 
            title:              "Use linefeed as newline.", 
            messageFormat:      "Use linefeed as newline.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseLinefeedAsNewLine, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0046</summary>
        public static readonly DiagnosticDescriptor UseSpacesInsteadOfTab = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.UseSpacesInsteadOfTab, 
            title:              "Use spaces instead of tab.", 
            messageFormat:      "Use spaces instead of tab.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseSpacesInsteadOfTab, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0047</summary>
        public static readonly DiagnosticDescriptor WrapAndIndentEachNodeInList = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.WrapAndIndentEachNodeInList, 
            title:              "[deprecated] Wrap and indent each node in list.", 
            messageFormat:      "[deprecated] Use analyzer RCS0053 instead.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.WrapAndIndentEachNodeInList, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0048</summary>
        public static readonly DiagnosticDescriptor RemoveNewlinesFromInitializerWithSingleLineExpression = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.RemoveNewlinesFromInitializerWithSingleLineExpression, 
            title:              "Remove newlines from initializer with single-line expression.", 
            messageFormat:      "Remove newlines from initializer with single-line expression.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveNewlinesFromInitializerWithSingleLineExpression, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0049</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineAfterTopComment = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineAfterTopComment, 
            title:              "Add empty line after top comment.", 
            messageFormat:      "Add empty line after top comment.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineAfterTopComment, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0050</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBeforeTopDeclaration = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineBeforeTopDeclaration, 
            title:              "Add empty line before top declaration.", 
            messageFormat:      "Add empty line before top declaration.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineBeforeTopDeclaration, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0051</summary>
        public static readonly DiagnosticDescriptor AddNewLineBetweenClosingBraceAndWhileKeywordOrViceVersa = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineBetweenClosingBraceAndWhileKeywordOrViceVersa, 
            title:              "Add newline between closing brace and 'while' keyword (or vice versa).", 
            messageFormat:      "Add newline between closing brace and 'while' keyword.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineBetweenClosingBraceAndWhileKeywordOrViceVersa, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0052</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeEqualsSignInsteadOfAfterItOrViceVersa = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeEqualsSignInsteadOfAfterItOrViceVersa, 
            title:              "Add newline before equals sign instead of after it (or vice versa).", 
            messageFormat:      "Add newline before equals sign instead of after it.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineBeforeEqualsSignInsteadOfAfterItOrViceVersa, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0053</summary>
        public static readonly DiagnosticDescriptor FixFormattingOfList = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.FixFormattingOfList, 
            title:              "Fix formatting of a list.", 
            messageFormat:      "Fix formatting of {0}.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.FixFormattingOfList, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0054</summary>
        public static readonly DiagnosticDescriptor FixFormattingOfCallChain = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.FixFormattingOfCallChain, 
            title:              "Fix formatting of a call chain.", 
            messageFormat:      "Fix formatting of a call chain.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.FixFormattingOfCallChain, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS0055</summary>
        public static readonly DiagnosticDescriptor FixFormattingOfBinaryExpressionChain = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.FixFormattingOfBinaryExpressionChain, 
            title:              "Fix formatting of a binary expression chain.", 
            messageFormat:      "Fix formatting of a binary expression chain.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.FixFormattingOfBinaryExpressionChain, 
            customTags:         Array.Empty<string>());

        public static partial class ReportOnly
        {
            /// <summary>RCS0011i</summary>
            public static readonly DiagnosticDescriptor RemoveEmptyLineBetweenSingleLineAccessors = DiagnosticDescriptorFactory.Default.Create(
                id:                 DiagnosticIdentifiers.AddEmptyLineBetweenSingleLineAccessorsOrViceVersa, 
                title:              "Add empty line between single-line accessors (or vice versa).", 
                messageFormat:      "Remove empty line between single-line accessors.", 
                category:           DiagnosticCategories.Formatting, 
                defaultSeverity:    DiagnosticSeverity.Info, 
                isEnabledByDefault: false, 
                description:        null, 
                helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineBetweenSingleLineAccessorsOrViceVersa, 
                customTags:         Array.Empty<string>());

            /// <summary>RCS0015i</summary>
            public static readonly DiagnosticDescriptor RemoveEmptyLineBetweenUsingDirectivesWithDifferentRootNamespace = DiagnosticDescriptorFactory.Default.Create(
                id:                 DiagnosticIdentifiers.AddEmptyLineBetweenUsingDirectivesWithDifferentRootNamespaceOrViceVersa, 
                title:              "Add empty line between using directives with different root namespace (or vice versa).", 
                messageFormat:      "Remove empty line between using directives with different root namespace.", 
                category:           DiagnosticCategories.Formatting, 
                defaultSeverity:    DiagnosticSeverity.Info, 
                isEnabledByDefault: false, 
                description:        null, 
                helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineBetweenUsingDirectivesWithDifferentRootNamespaceOrViceVersa, 
                customTags:         Array.Empty<string>());

            /// <summary>RCS0027i</summary>
            public static readonly DiagnosticDescriptor AddNewLineAfterBinaryOperatorInsteadOfBeforeIt = DiagnosticDescriptorFactory.Default.Create(
                id:                 DiagnosticIdentifiers.AddNewLineBeforeBinaryOperatorInsteadOfAfterItOrViceVersa, 
                title:              "Add newline before binary operator instead of after it (or vice versa).", 
                messageFormat:      "Add newline after binary operator instead of before it.", 
                category:           DiagnosticCategories.Formatting, 
                defaultSeverity:    DiagnosticSeverity.Info, 
                isEnabledByDefault: false, 
                description:        null, 
                helpLinkUri:        DiagnosticIdentifiers.AddNewLineBeforeBinaryOperatorInsteadOfAfterItOrViceVersa, 
                customTags:         Array.Empty<string>());

            /// <summary>RCS0028i</summary>
            public static readonly DiagnosticDescriptor AddNewLineAfterConditionalOperatorInsteadOfBeforeIt = DiagnosticDescriptorFactory.Default.Create(
                id:                 DiagnosticIdentifiers.AddNewLineBeforeConditionalOperatorInsteadOfAfterItOrViceVersa, 
                title:              "Add newline before conditional operator instead of after it (or vice versa).", 
                messageFormat:      "Add newline after conditional operator instead of before it.", 
                category:           DiagnosticCategories.Formatting, 
                defaultSeverity:    DiagnosticSeverity.Info, 
                isEnabledByDefault: false, 
                description:        null, 
                helpLinkUri:        DiagnosticIdentifiers.AddNewLineBeforeConditionalOperatorInsteadOfAfterItOrViceVersa, 
                customTags:         Array.Empty<string>());

            /// <summary>RCS0032i</summary>
            public static readonly DiagnosticDescriptor AddNewLineAfterExpressionBodyArrowInsteadOfBeforeIt = DiagnosticDescriptorFactory.Default.Create(
                id:                 DiagnosticIdentifiers.AddNewLineBeforeExpressionBodyArrowInsteadOfAfterItOrViceVersa, 
                title:              "Add newline before expression-body arrow instead of after it (or vice versa).", 
                messageFormat:      "Add newline after expression-body arrow instead of before it.", 
                category:           DiagnosticCategories.Formatting, 
                defaultSeverity:    DiagnosticSeverity.Info, 
                isEnabledByDefault: false, 
                description:        null, 
                helpLinkUri:        DiagnosticIdentifiers.AddNewLineBeforeExpressionBodyArrowInsteadOfAfterItOrViceVersa, 
                customTags:         Array.Empty<string>());

            /// <summary>RCS0051i</summary>
            public static readonly DiagnosticDescriptor RemoveNewLineBetweenClosingBraceAndWhileKeyword = DiagnosticDescriptorFactory.Default.Create(
                id:                 DiagnosticIdentifiers.AddNewLineBetweenClosingBraceAndWhileKeywordOrViceVersa, 
                title:              "Add newline between closing brace and 'while' keyword (or vice versa).", 
                messageFormat:      "Remove newline between closing brace and 'while' keyword.", 
                category:           DiagnosticCategories.Formatting, 
                defaultSeverity:    DiagnosticSeverity.Info, 
                isEnabledByDefault: false, 
                description:        null, 
                helpLinkUri:        DiagnosticIdentifiers.AddNewLineBetweenClosingBraceAndWhileKeywordOrViceVersa, 
                customTags:         Array.Empty<string>());

            /// <summary>RCS0052i</summary>
            public static readonly DiagnosticDescriptor AddNewLineAfterEqualsSignInsteadOfBeforeIt = DiagnosticDescriptorFactory.Default.Create(
                id:                 DiagnosticIdentifiers.AddNewLineBeforeEqualsSignInsteadOfAfterItOrViceVersa, 
                title:              "Add newline before equals sign instead of after it (or vice versa).", 
                messageFormat:      "Add newline after equals sign instead of before it.", 
                category:           DiagnosticCategories.Formatting, 
                defaultSeverity:    DiagnosticSeverity.Info, 
                isEnabledByDefault: false, 
                description:        null, 
                helpLinkUri:        DiagnosticIdentifiers.AddNewLineBeforeEqualsSignInsteadOfAfterItOrViceVersa, 
                customTags:         Array.Empty<string>());

        }
    }
}