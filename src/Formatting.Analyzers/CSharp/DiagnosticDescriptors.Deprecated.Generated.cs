// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

using System;
using Microsoft.CodeAnalysis;

namespace Roslynator.Formatting.CSharp
{
    public static partial class DiagnosticDescriptors
    {
        [Obsolete("", error: true)]
        internal static readonly DiagnosticDescriptor AddNewLineAfterBinaryOperatorInsteadOfBeforeIt2 = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineAfterBinaryOperatorInsteadOfBeforeIt2, 
            title:              "Add newline after binary operator instead of before it.", 
            messageFormat:      "Add newline after binary operator instead of before it.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineAfterBinaryOperatorInsteadOfBeforeIt2, 
            customTags:         Array.Empty<string>());

        [Obsolete("", error: true)]
        internal static readonly DiagnosticDescriptor AddNewLineAfterConditionalOperatorInsteadOfBeforeIt2 = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineAfterConditionalOperatorInsteadOfBeforeIt2, 
            title:              "Add newline after conditional operator instead of before it.", 
            messageFormat:      "Add newline after conditional operator instead of before it.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineAfterConditionalOperatorInsteadOfBeforeIt2, 
            customTags:         Array.Empty<string>());

        [Obsolete("", error: true)]
        internal static readonly DiagnosticDescriptor AddNewLineAfterExpressionBodyArrowInsteadOfBeforeIt2 = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.AddNewLineAfterExpressionBodyArrowInsteadOfBeforeIt2, 
            title:              "Add newline after expression-body arrow instead of before it.", 
            messageFormat:      "Add newline after expression-body arrow instead of before it.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineAfterExpressionBodyArrowInsteadOfBeforeIt2, 
            customTags:         Array.Empty<string>());

        [Obsolete("", error: true)]
        internal static readonly DiagnosticDescriptor RemoveEmptyLineBetweenSingleLineAccessors2 = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.RemoveEmptyLineBetweenSingleLineAccessors2, 
            title:              "Remove empty line between single-line accessors.", 
            messageFormat:      "Remove empty line between single-line accessors.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveEmptyLineBetweenSingleLineAccessors2, 
            customTags:         Array.Empty<string>());

        [Obsolete("", error: true)]
        internal static readonly DiagnosticDescriptor RemoveEmptyLineBetweenUsingDirectivesWithDifferentRootNamespace2 = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.RemoveEmptyLineBetweenUsingDirectivesWithDifferentRootNamespace2, 
            title:              "Remove empty line between using directives with different root namespace.", 
            messageFormat:      "Remove empty line between using directives with different root namespace.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveEmptyLineBetweenUsingDirectivesWithDifferentRootNamespace2, 
            customTags:         Array.Empty<string>());

        [Obsolete("", error: true)]
        internal static readonly DiagnosticDescriptor RemoveNewLineBetweenClosingBraceAndWhileKeyword2 = DiagnosticDescriptorFactory.Default.Create(
            id:                 DiagnosticIdentifiers.RemoveNewLineBetweenClosingBraceAndWhileKeyword2, 
            title:              "Remove newline between closing brace and 'while' keyword.", 
            messageFormat:      "Remove newline between closing brace and 'while' keyword.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveNewLineBetweenClosingBraceAndWhileKeyword2, 
            customTags:         Array.Empty<string>());

    }
}